import { Action, Update } from 'nestjs-telegraf';
import { Logger } from '@nestjs/common';
import { UserService } from '../service/user.service';
import { IContext } from '../type/context.interface';
import { backButton, eventMenu, groupMenu } from '../battons/app.buttons';
import { TicketService } from '../service/ticket.service';
import { HELP_MESSAGE } from '../constants/massage';
import { events } from '../constants/events';
import { QrcodeService } from '../service/qrcode.service';

@Update()
export class MainMenuHandler {
  private readonly logger: Logger = new Logger(MainMenuHandler.name);

  constructor(
    private readonly userService: UserService,
    private readonly ticketService: TicketService,
    private readonly qrcodeService: QrcodeService,
  ) {}

  //Handle the "choose_event" action to display the event menu.
  @Action('choose_event')
  async choose_event(ctx: IContext) {
    this.logger.log('choose_event');
    await ctx.editMessageText('–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é', eventMenu(events));
  }
  // Handle the "your_tickets" action to display user's tickets or a message if none.
  @Action('your_tickets')
  async your_tickets(ctx: IContext) {
    this.logger.log('your_tickets');
    const userId = ctx.from.id;
    const tickets = await this.ticketService.getTicketByOwnerId(userId);
    if (tickets.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –∫–≤–∏—Ç–∫—ñ–≤.');
    } else {
      for (const ticket of tickets) {
        // Format ticket information and send QR code to the user
        const ticketInfo = `
        –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó: ${ticket.eventName} 
        –î–∞—Ç–∞: ${ticket.eventDate.day}.${ticket.eventDate.month}.${ticket.eventDate.year} 
        –ú—ñ—Å—Ü–µ –Ω–æ–º–µ—Ä: ${ticket.eventLocation}
        –í–ª–∞—Å–Ω—ã–∫: 
        –ò–º—è: ${ctx.session.first_name}
        –ü—Ä–∏–∑–≤–∏—â–µ: ${ctx.session.last_name}
        –¢–µ–ª–µ—Ñ–æ–Ω: +${ctx.session.fullPhoneNumber.countryCode}${ctx.session.fullPhoneNumber.phoneNumber}`;
        await this.qrcodeService.sendQRCodeToUser(ctx, ticketInfo);
      }
    }
    await ctx.reply('–ø–æ–≤–µ—Ä–Ω—É—Ç—ñ—Å—è', backButton());
  }
  // Handle the "profile" action to display user's profile information.
  @Action('profile')
  async profile(ctx: IContext) {
    const user = await this.userService.getUserForUserId(ctx.from.id);
    await ctx.editMessageText(
      `–í–∞—à–µ —ñ–º'—è: ${user.userFirstName}
      –í–∞—à–µ –ø—Ä–∏–∑–≤–∏—â–µ: ${user.userLastName}
      –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: +${user.fullPhoneNumber.countryCode}${user.fullPhoneNumber.phoneNumber}`,
      backButton(),
    );
    this.logger.log('profile');
  }
  // Handle the "support" action to display help message.
  @Action('support')
  async support(ctx: IContext) {
    this.logger.log('support');
    await ctx.editMessageText(HELP_MESSAGE, backButton());
  }
  //  Handle the "contact_operator" action to notify the operator.
  @Action('contact_operator')
  async contact_operator(ctx: IContext) {
    const operatorTelegramId = process.env.SUPPORT_ID;
    const message = `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è —ñ–∑ –≤–∞–º–∏. –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: @${ctx.from.username}`;
    await ctx.telegram.sendMessage(operatorTelegramId, message);
    await ctx.editMessageText(
      '–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ—Ç—å –≤ –æ—Å–æ–±–∏—Å—Ç—ñ',
      backButton(),
    );
  }
  // Handle the "back" action to return to the main menu.
  @Action('back')
  async back(ctx: IContext) {
    await ctx.editMessageText('üîΩ–û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—éüîΩ', groupMenu());
  }
}
