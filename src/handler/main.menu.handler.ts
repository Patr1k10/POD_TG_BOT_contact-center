import { Action, Update } from 'nestjs-telegraf';
import { Logger } from '@nestjs/common';
import { UserService } from '../service/user.service';
import { IContext } from '../type/context.interface';
import { eventMenu, groupMenu } from '../battons/app.buttons';
import { TicketService } from '../service/ticket.service';
import { HELP_MESSAGE } from '../constants/massage';

@Update()
export class MainMenuHandler {
  private readonly logger: Logger = new Logger(MainMenuHandler.name);

  constructor(
    private readonly userService: UserService,
    private readonly ticketService: TicketService,
  ) {}

  @Action('choose_event')
  async choose_event(ctx: IContext) {
    this.logger.log('choose_event');
    await ctx.reply('–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é', eventMenu());
  }

  @Action('your_tickets')
  async your_tickets(ctx: IContext) {
    this.logger.log('your_tickets');
    const userId = ctx.from.id;
    const tickets = await this.ticketService.getTicketByOwnerId(userId);
    if (tickets.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –∫–≤–∏—Ç–∫—ñ–≤.');
    } else {
      for (const ticket of tickets) {
        const ticketInfo = `–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó: ${ticket.eventName}\n–î–∞—Ç–∞: ${ticket.eventDate}\n–ú—ñ—Å—Ü–µ: ${ticket.eventLocation}`;
        await ctx.reply(ticketInfo);
      }
    }
  }

  @Action('profile')
  async profile(ctx: IContext) {
    const user = await this.userService.getUserForUserId(ctx.from.id);
    await ctx.reply(
      `–í–∞—à–µ —ñ–º'—è: ${user.userFirstName}
      –í–∞—à–µ –ø—Ä–∏–∑–≤–∏—â–µ: ${user.userLastName}
      –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: +${user.fullPhoneNumber.countryCode}${user.fullPhoneNumber.phoneNumber}`,
    );
    this.logger.log('profile');
  }

  @Action('support')
  async support(ctx: IContext) {
    this.logger.log('support');
    await ctx.reply(HELP_MESSAGE);
  }

  @Action('contact_operator')
  async contact_operator(ctx: IContext) {
    this.logger.log('contact_operator');
    // –í–∞—à–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–≤'—è–∑–æ–∫ –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º" —Ç—É—Ç
  }

  @Action('back')
  async back(ctx: IContext) {
    await ctx.reply('üîΩ–û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—éüîΩ', groupMenu());
  }
}
