import { Action, Hears, On, Start, Update } from 'nestjs-telegraf';
import { Logger } from '@nestjs/common';
import { IContext } from '../type/context.interface';
import { IMessage } from '../type/message.interface';
import { createPhoneNumberButton, registerButton } from '../battons/app.buttons';

@Update()
export class BasicCommandsHandler {
  private readonly logger: Logger = new Logger(BasicCommandsHandler.name);

  @Start()
  async startCommand(ctx: IContext) {
    const user = ctx.from;
    this.logger.log(`
      User ID: ${user.id}
      First Name: ${user.first_name}
      Last Name: ${user.last_name}
      Username: ${user.username}`);
    this.logger.log('startCommand executed successfully');
    await ctx.reply(
      '–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É –¶–∏—Ä–∫—É! üé™ü§π‚Äç‚ôÇÔ∏è \n–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —Ç–∞ —à–≤–∏–¥–∫–æ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫ –Ω–∞ –Ω–∞—à—ñ –∑–∞—Ö–æ–ø–ª—é—é—á—ñ –≤–∏—Å—Ç–∞–≤–∏. ' +
        '\n–ê–ª–µ —Å–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è',
      registerButton(),
    );
  }

  @Action('register')
  async register(ctx: IContext) {
    this.logger.log('register');
    await ctx.reply('üîΩ–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—ÉüîΩ', createPhoneNumberButton());
  }

  @On('contact')
  async onContact(ctx: IContext) {
    const message = ctx.message as IMessage;
    if (!message.contact.last_name) {
      await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞ –¥–æ–¥–∞–π—Ç–µ –ø—Ä–∏–∑–≤–∏—à–µ');
      ctx.session.awaitingUserIdInput = true;
    }
    ctx.session.phone_number = message.contact.phone_number;
    ctx.session.first_name = message.contact.first_name;
    ctx.session.last_name = message.contact.last_name;
    this.logger.log(message.contact);
  }

  @Hears(/^[–∞-—è–ê-–Ø—ë–Å—ñ–Ü—ó–á“ë“ê]+$/iu)
  async addUserId(ctx: IContext) {
    if (ctx.session.awaitingUserIdInput === false) {
      return;
    }
    const message = ctx.message as IMessage;
    ctx.session.last_name = message.text;
    ctx.session.awaitingUserIdInput = false;
  }
}
